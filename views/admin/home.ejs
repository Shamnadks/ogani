<%- include('../layouts/adminheader') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<style>
 .chart-container {
  width: 600px;
  height: 400px;
  border: 1px solid #0f0a0a;
  padding: 20px;
  margin: 20px auto;
}

.chart-wrapper {
  width: 100%;
  height: 100%;
  display: inline-block;
  box-sizing: border-box;
  padding: 10px;
}

</style>
<style>
  table {
    border-collapse: collapse;
    width: 100%;
    margin-bottom: 20px;
  }

  th, td {
    text-align: left;
    padding: 8px;
    border-bottom: 1px solid #ddd;
  }

  th {
    background-color: #f2f2f2;
  }

  tr:hover {
    background-color: #f5f5f5;
  }

  #downloadCsvBtn, #downloadPdfBtn {
    padding: 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin-right: 10px;
  }

  #downloadCsvBtn:hover, #downloadPdfBtn:hover {
    background-color: #3e8e41;
  }

  .containers {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

.row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.chart-container {
  flex: 1;
  margin: 10px;
  padding: 10px;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.chart-wrapper {
  height: 400px;
 
}

table {
  border-collapse: collapse;
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}

th, td {
  padding: 10px;
  text-align: left;
  border: 1px solid #ccc;
}

th {
  background-color: #3e8e41;
  color: #fff;
}

tbody tr:nth-child(even) {
  background-color: #f2f2f2;
}


form {
  display: flex;
  align-items: center;
  margin-left: 350px;
}

label {
  display: inline-block;
  margin-right: 10px;
}

input[type="date"] {
  padding: 8px;
  margin-right: 10px;
  border-radius: 4px;
  border: 1px solid #ccc;
}

button[type="submit"] {
  padding: 10px 20px;
  background-color: #3e8e41;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
}

button[type="submit"]:hover {
  background-color:  #3e8e41;
}



</style>

   
    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-section set-bg" data-setbg="img/breadcrumb.jpg">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <div class="breadcrumb__text">
                        <h2>Dash Board</h2>
                        <div class="breadcrumb__option">
                            <a href="./index.html"></a>
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <br>
    <br>
    <br>


<!--graph potion starting-->

<div class="containers" >
  <div class="row">
    <div class="chart-container" >
      <h3>Orders report</h3>
      <div class="chart-wrapper">
        <canvas id="myChart"></canvas>
      </div>
    </div>
    <div class="chart-container">
      <h3>Sales report</h3>
      <div class="chart-wrapper">
        <canvas id="sales-chart"></canvas>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="chart-container">
      <h3>Another report</h3>
      <div class="chart-wrapper">
        <canvas id="ordersChart"></canvas>
      </div>
    </div>
  </div>
</div>



<!--down load sales report-->
<h3 style="text-align: center;">Sales Report</h3>
  <form>
    <div>
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" name="startDate">
   
    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" name="endDate">
    <br>
  </div>
    <button type="submit" class="btn-success">Generate Report</button><br>
    <button id="downloadCsvBtn" class="btn btn-success">Download CSV</button>
  </form>
  <br>
  <table id="orderTable">
    <thead>
      <tr>
        <th>Order ID</th>
        <th>Date</th>
        <th>Payment Method</th>
        <th>Status</th>
        <th>Subtotal</th>
      </tr>
    </thead>
    <tbody>
      <% order.forEach(o => { %>
        <tr>
            <td><%= o.orderId %></td>
            <td><%= new Date(o.date).toLocaleDateString() %></td>
            <td><%= o.payment_method === "1" ? "COD" : "Online Payment" %></td>
            <td><%= o.status %></td>
            <td><%= o.subtotal %></td>
        </tr>
    <% }); %>
    </tbody>
  </table>
  <br>
  <table id="productTable">
    <thead>
      <tr>
        <th>Order ID</th>
        <th>Date</th>
        <th>Product Name</th>
        <th>Price</th>
        <th>Quantity</th>
      </tr>
    </thead>
    <tbody>
     
    </tbody>
  </table>
  <br>
  
 
<!--download sales report ende-->

      
<!--grph potion is ending-->



<!-- Product Section End -->

<!-- Footer Section Begin -->

<!-- Footer Section End -->

<!-- Js Plugins -->
<script src="js/jquery-3.3.1.min.js"></script>
<script src="js/bootstrap.min.js"></script>
<script src="js/jquery.nice-select.min.js"></script>
<script src="js/jquery-ui.min.js"></script>
<script src="js/jquery.slicknav.js"></script>
<script src="js/mixitup.min.js"></script>
<script src="js/owl.carousel.min.js"></script>
<script src="js/main.js"></script>


  <script>
    const salesChart = document.getElementById('sales-chart').getContext('2d');

// Function to fetch the sales report data and generate the line graph
async function generateSalesReport() {
try {
  // Fetch the sales report data
  const response = await fetch('/admin/admin-dash');
  const data = await response.json();

  // Create the line graph
  const chart = new Chart(salesChart, {
    type: 'line',
    data: data.data,
  });
} catch (error) {
  console.error(error);
}
}

// Call the function to generate the line graph
generateSalesReport();

fetch('/admin/admin-dash')
.then(res => res.json())
  .then(data => {
    const chartData = {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      datasets: [
        {
          label: 'Delivered',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1,
          data: data.chart.delivered
        },
        {
          label: 'Cancelled',
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1,
          data: data.chart.cancelled
        },
        {
          label: 'Returned',
          backgroundColor: 'rgba(54, 162, 235, 0.2)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1,
          data: data.chart.returned
        }
      ]
    };

    const config = {
      type: 'bar',
      data: chartData,
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      },
    };

    const myChart = new Chart(
      document.getElementById('myChart'),
      config
    );
    const revenueData = data.revenue.map(item => ({ sum: item.total, month: item.month }));

const chartData2 = {
  labels: revenueData.map(item => item.month),
  datasets: [{
    label: "Revenue",
    data: revenueData.map(item => item.sum),
    borderColor: "#3e95cd",
    fill: false
  }]
};

const ctx = document.getElementById("revenueChart").getContext("2d");
const revenueChart = new Chart(ctx, {
  type: 'line',
  data: chartData2,
  options: {
    scales: {
      y: {
        ticks: {
          beginAtZero: true
        }
      }
    }
  }
});
})
.catch(err => console.error(err))

</script>

 <!--Sales chart-->
<script>
  fetch('/admin/admin-dash?year=2023&month=3')
  .then(response => response.json()) // parse the response as JSON
  .then(dataa => {
    // create a line chart using the data
    const chartData = dataa.map(({ year, month, count }) => ({
      x: new Date(year, month - 1),
      y: count,
    }));
    const ctx = document.getElementById('SalesChart').getContext('2d');
    new Chart(ctx, {
      type: 'line',
      data: {
        datasets: [
          {
            label: 'Orders',
            data: chartData,
            borderColor: 'rgb(255, 99, 132)',
            fill: false,
          },
        ],
      },
      options: {
        scales: {
          x: {
            type: 'time',
            time: {
              unit: 'month',
            },
          },
          y: {
            beginAtZero: true,
          },
        },
      },
    });
  })
  .catch(error => console.error(error));
</script>


<!-- monthly and yearly sales report-->
<script>
  fetch('/admin/admin-dash')
    .then(response => response.json())
    .then(dataaa => {
      const monthlyOrders = dataaa.monthlyOrders;
      const yearlyOrders = dataaa.yearlyOrders;

      const monthlyData = {
        label: 'Monthly Orders',
        data: monthlyOrders.map(o => o.count),
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 1
      };

      const yearlyData = {
        label: 'Yearly Orders',
        data: yearlyOrders.map(o => o.count),
        backgroundColor: 'rgba(54, 162, 235, 0.2)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1
      };

      const ordersChart = new Chart('ordersChart', {
        type: 'line',
        data: {
          labels: monthlyOrders.map(o => o.month + '/' + o.year),
          datasets: [monthlyData, yearlyData]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    })
    .catch(err => console.error(err));
</script>




<!-- sales report-->

<script>
  $('form').submit(async function (event) {
      event.preventDefault();
  
      const startDate = $('#startDate').val();
      const endDate = $('#endDate').val();
  
      try {
        const response = await fetch(`/admin/salesreport?startDate=${startDate}&endDate=${endDate}`);
        const data = await response.json();
  
        // Clear the tables
        $('#orderTable tbody').empty();
        $('#productTable tbody').empty();
  
        // Populate the tables with data
        data.orders.forEach(order => {
          const { orderId, date, payment_method, status, subtotal } = order;
  
          $('#orderTable tbody').append(`
           
            <tr>
              <td>${orderId}</td>
              <td>${new Date(date).toLocaleDateString()}</td>
              <td>${payment_method == "1" ? "COD" : "Online Payment"}</td>
              <td>${status}</td>
              <td>${subtotal}</td>
            </tr>
          `);
  
          const products = data.products.filter(product => product.orderId === orderId);
          products.forEach(product => {
            const { id, name, price, quantity } = product;
  
            $('#productTable tbody').append(`
             
              <tr>
                <td>${orderId}</td>
                <td>${new Date(date).toLocaleDateString()}</td>
                <td>${name}</td>
                <td>${price}</td>
                <td>${quantity} </td>
              </tr>
            `);
          });
        });
      } catch (error) {
        console.error(error);
        // handle error here
      }
    });
    $('#downloadCsvBtn').click(function () {
  const csvData = [];
  
  // Add headings for the order table
  const orderTableHeadings = ['Order ID','Date', 'Payment Method', 'Status','Subtotal','','product','product price', 'quantity'];
  csvData.push(orderTableHeadings.join(','));
  
  // Add order and product data to CSV
  $('#orderTable tbody tr').each(function () {
    const orderId = $(this).find('td:first-child').text(); // get the order ID from the first column
    let orderData = null;
  
    $(this).find('td').each(function (index) {
      if (index == 0) {
        orderData = [$(this).text()];
      } else {
        orderData.push($(this).text());
      }
    });
  
    // Add product data to order data
    const products = $('#productTable tbody tr').filter(function () {
      return $(this).find('td:first-child').text() === orderId; // filter products by order ID
    });
  
    products.each(function () {
      const rowData = [...orderData]; // create a copy of order data
      $(this).find('td:not(:first-child)').each(function () {
        rowData.push($(this).text());
      });
      csvData.push(rowData.join(',')); // add order and product data to CSV
    });
  });
  
  // Generate CSV file
  const csvBlob = new Blob([csvData.join('\n')], { type: 'text/csv' });
  const csvUrl = URL.createObjectURL(csvBlob);
  const csvLink = document.createElement('a');
  csvLink.href = csvUrl;
  csvLink.download = 'salesreport.csv';
  csvLink.click();
});
</script>


</body>

</html>